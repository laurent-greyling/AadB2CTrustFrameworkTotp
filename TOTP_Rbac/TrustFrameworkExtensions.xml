<TrustFrameworkPolicy 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
    xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
    PolicySchemaVersion="0.3.0.0" 
    TenantId="yourtenant.onmicrosoft.com" 
    PolicyId="B2C_1A_TrustFrameworkExtensions" 
    PublicPolicyUri="http://yourtenant.onmicrosoft.com/B2C_1A_TrustFrameworkExtensions">

  <BasePolicy>
    <TenantId>yourtenant.onmicrosoft.com</TenantId>
    <PolicyId>B2C_1A_TrustFrameworkLocalization</PolicyId>
  </BasePolicy>
  <BuildingBlocks>
    <ClaimsSchema>

      <ClaimType Id="forceChangePasswordNextLogin">
        <DisplayName>forceChangePasswordNextLogin</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>Directory property, Whether the user password has expired</AdminHelpText>
      </ClaimType>

      <ClaimType Id="continueOnPasswordExpiration">
        <DisplayName>continueOnPasswordExpiration</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>continue ests non-interactive upon password expiration</AdminHelpText>
      </ClaimType>
      <ClaimType Id="samePassword">
        <DisplayName>samePassword</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>Whether user enters the same password</AdminHelpText>
      </ClaimType>

      <ClaimType Id="userMsg">
        <DisplayName></DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A claim responsible for holding user messages</AdminHelpText>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <!--TOTP claims-->
      <ClaimType Id="emails">
        <DisplayName>Email Addresses</DisplayName>
        <DataType>stringCollection</DataType>
        <AdminHelpText>Email addresses of the user.</AdminHelpText>
        <UserHelpText>Your email addresses.</UserHelpText>
      </ClaimType>

      <ClaimType Id="ReadOnlyEmail">
        <DisplayName>ReadOnlyEmail</DisplayName>
        <DataType>string</DataType>
        <UserHelpText>Add help text here</UserHelpText>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>

      <ClaimType Id="totpIdentifier">
        <DisplayName>UserId, Phone number or Email which can present the user's identity</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>UserId, Phone number or Email which can be used to create QR code identity.</AdminHelpText>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <ClaimType Id="numberOfAvailableDevices">
        <DisplayName>Number of available devices:</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <ClaimType Id="QrCodeScanInstruction">
        <DisplayName>Once you've downloaded the Authenticator app, you can use any of the methods below to continue with enrollment.</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <ClaimType Id="QrCodeVerifyInstruction">
        <DisplayName>Enter the verification code from your authenticator app​.</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <ClaimType Id="qrCodeContent">
        <DisplayName>QR Code Text</DisplayName>
        <DataType>string</DataType>
        <UserHelpText>QR code text</UserHelpText>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <ClaimType Id="secretKey">
        <DisplayName>If you cant't scan the image, enter the Secret Key:</DisplayName>
        <DataType>string</DataType>
        <UserHelpText>QR code secret</UserHelpText>
        <UserInputType>Paragraph</UserInputType>
      </ClaimType>

      <ClaimType Id="otpCode">
        <DisplayName>Enter your code</DisplayName>
        <DataType>string</DataType>
        <UserHelpText>Enter the 6-digit verification code generated by the the Authenticator app in the box</UserHelpText>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[0-9]{6}$" />
        </Restriction>
      </ClaimType>

      <ClaimType Id="uriLabel">
        <DisplayName>Uri Label</DisplayName>
        <DataType>string</DataType>
      </ClaimType>

      <ClaimType Id="issuer">
        <DisplayName>Issuer</DisplayName>
        <DataType>string</DataType>
      </ClaimType>

      <ClaimType Id="UserId">
        <DisplayName>Username</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText>Your username.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The username you have provided is not valid. It must begin with an alphabetical character or number, and can only contain alphanumeric characters and the following symbols: _ -" />
        </Restriction>
      </ClaimType>

      <ClaimType Id="role">
          <DisplayName>Role</DisplayName>
          <DataType>string</DataType>        
      </ClaimType>
      <ClaimType Id="tfp">
          <DisplayName>Trust Framework Policy</DisplayName>
          <DataType>string</DataType>        
      </ClaimType>

      <!--Banned password-->
      <ClaimType Id="dummy">
        <DisplayName>hide me</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="dummyTrue">
        <DisplayName>hide me</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="bannedPassword">
        <DisplayName>bannedPassword</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="banned">
        <DisplayName>bannedPassword</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>

      <!--End of TOTP Claims-->
    </ClaimsSchema>
    <ClaimsTransformations>
          <!-- Compares the new password to these input values to determine if it is on the banned list.
            If there is a match bannedPassword=true. If there is not match, bannedPassword does not exist
            in the claimes pipeline -->
        <ClaimsTransformation Id="passwordToMatchBanList" TransformationMethod="LookupValue">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="newPassword" TransformationClaimType="inputParameterId" />
          </InputClaims>
          <InputParameters>
            <InputParameter Id="Password!" DataType="string" Value="true" />
            <InputParameter Id="P@ssw0rd!" DataType="string" Value="true" />
            <InputParameter Id="Pa$$word" DataType="string" Value="true" />
            <InputParameter Id="Passw0rd" DataType="string" Value="true" />
            <InputParameter Id="P@a$$w0rd" DataType="string" Value="true" />
            <InputParameter Id="P@a$$w0rd!" DataType="string" Value="true" />
            <InputParameter Id="qwerty!1" DataType="string" Value="true" />
            <InputParameter Id="qwerty@1" DataType="string" Value="true" />
            <InputParameter Id="qw3rty!" DataType="string" Value="true" />
            <InputParameter Id="qw3rty@" DataType="string" Value="true" />            
            <InputParameter Id="errorOnFailedLookup" DataType="boolean" Value="false" />
          </InputParameters>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="bannedPassword" TransformationClaimType="outputClaim" />
          </OutputClaims>
        </ClaimsTransformation>

        <!-- Compares bannedPassword with dummy claim set to True. If these match then we have a banned password.
					If they dont match, then the banned claim is output as false. This is to counter the fact
					that the lookup claimsTransformation does not output a claim when there isnt a match -->
      <ClaimsTransformation Id="CheckBannedPasswordValue" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="bannedPassword" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="dummyTrue" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="EQUAL" />
          <InputParameter Id="ignoreCase" DataType="string" Value="true" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="banned" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Compares the value of banned to false. If banned is false, then no error is thrown, the user did
				not use a banned pwd. If banned is true, then it will not match to "false" and thus we throw an error
				that the password is weak -->
      <ClaimsTransformation Id="AssertBannedPasswordFalse" TransformationMethod="AssertBooleanClaimIsEqualToValue">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="banned" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="valueToCompareTo" DataType="boolean" Value="false" />
        </InputParameters>
      </ClaimsTransformation>

      <ClaimsTransformation Id="CompareOldAndNewPassword" TransformationMethod="CompareClaims">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="password" TransformationClaimType="inputClaim1"/>
            <InputClaim ClaimTypeReferenceId="newPassword" TransformationClaimType="inputClaim2"/>
          </InputClaims>
          <InputParameters>
            <InputParameter Id="operator" DataType="string" Value="EQUAL"/>
          </InputParameters>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="samePassword" TransformationClaimType="outputClaim"/>
          </OutputClaims>
        </ClaimsTransformation>
        <!--Assert whether the old and new passwords are same, and return the UserMessageIfClaimsTransformationBooleanValueIsNotEqual error message-->
        <ClaimsTransformation Id="ThrowErrorWhenPassowrdIsSame" TransformationMethod="AssertBooleanClaimIsEqualToValue">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="samePassword" TransformationClaimType="inputClaim"/>
          </InputClaims>
          <InputParameters>
            <InputParameter Id="valueToCompareTo" DataType="boolean" Value="false"/>
          </InputParameters>
        </ClaimsTransformation>
      <!--TOTP Claim Transforms-->
      <ClaimsTransformation Id="GetEmailFromReadOnlyEmail" TransformationMethod="CopyClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="ReadOnlyEmail" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <ClaimsTransformation Id="GetEmailFromEmails" TransformationMethod="GetSingleItemFromStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="ReadOnlyEmail" TransformationClaimType="extractedItem" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Create a TOPT secret key-->
      <ClaimsTransformation Id="CreateSecret" TransformationMethod="CreateOtpSecret">
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="secretKey" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Create the TOTP issuer name. The issuer name is your tenant name, such as "Contoso demo" -->
      <ClaimsTransformation Id="CreateIssuer" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="{AuthenticatorIssuer}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="issuer" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Create the TOTP URI label. The label is a combination of the totpIdentifier and the issuer name:
           For example, Contoso demo:emily@fabrikam.com-->
      <ClaimsTransformation Id="CreateUriLabel" TransformationMethod="FormatStringMultipleClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="issuer" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="totpIdentifier" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}:{1}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="uriLabel" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Create the TOTP URI. The label is a combination of the CreateUriLabel and the secret key:
      For example, otpauth://totp/Contoso%20demo:emily@fabrikam.com?secret=fay2lj7ynpntjgqa&issuer=Contoso+demo
      This URI is later converted into a QR code that is presented to the user-->
      <ClaimsTransformation Id="CreateUriString" TransformationMethod="BuildUri">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="uriLabel" TransformationClaimType="path" />
          <InputClaim ClaimTypeReferenceId="secretKey" TransformationClaimType="query.secret" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="scheme" DataType="string" Value="otpauth" />
          <InputParameter Id="host" DataType="string" Value="totp" />
          <InputParameter Id="query.issuer" DataType="string" Value="{AuthenticatorIssuer}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="qrCodeContent" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Copy the signInName to the totpIdentifier -->
      <ClaimsTransformation Id="SignInNameToTotpIdentifier" TransformationMethod="CopyClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="totpIdentifier" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Copy the email to the totpIdentifier -->
      <ClaimsTransformation Id="EmailToTotpIdentifier" TransformationMethod="CopyClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="totpIdentifier" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- Copy the UserId to the totpIdentifier -->
      <ClaimsTransformation Id="UserIdToLogonIdentifier" TransformationMethod="CopyClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="UserId" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="totpIdentifier" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>

      <!-- end of TOTP Claims Transforms-->

    </ClaimsTransformations>

    <Localization>
      <!-- TOTP localized strings (English) -->
      <LocalizedResources Id="api.selfasserted.totp.en">
        <LocalizedStrings>
          <LocalizedString ElementType="DisplayControl" ElementId="totpQrCodeControl" StringId="info_msg">You can download the Microsoft Authenticator app or use any other authenticator app of your choice.</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
    </Localization>


    <DisplayControls>
      <!-- Render the QR code. It takes the URI (qrCodeContent) input claim and renders it as a QR code-->
      <DisplayControl Id="totpQrCodeControl" UserInterfaceControlType="QrCodeControl">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="qrCodeContent" />
        </InputClaims>
        <DisplayClaims>
          <DisplayClaim ClaimTypeReferenceId="qrCodeContent" ControlClaimType="QrCodeContent" />
        </DisplayClaims>
      </DisplayControl>

      <!-- Render the TOTP information. It takes the totpIdentifier and the secretKey input claims and renders as a plan text-->
      <DisplayControl Id="authenticatorInfoControl" UserInterfaceControlType="AuthenticatorInfoControl">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="totpIdentifier" />
          <InputClaim ClaimTypeReferenceId="secretKey" />
        </InputClaims>
        <DisplayClaims>
          <DisplayClaim ClaimTypeReferenceId="totpIdentifier" />
          <DisplayClaim ClaimTypeReferenceId="secretKey" />
        </DisplayClaims>
      </DisplayControl>

      <!-- Render the authenticator apps icon. -->
      <DisplayControl Id="authenticatorAppIconControl" UserInterfaceControlType="AuthenticatorAppIconControl" />

    </DisplayControls>

    <!--End of TOTP contols-->
  </BuildingBlocks>

  <ClaimsProviders>

    <!--Add ProxyIdentity and IdentityExperience-->
    <ClaimsProvider>
      <DisplayName>Local Account SignIn</DisplayName>
      <TechnicalProfiles>
         <TechnicalProfile Id="login-NonInteractive">
          <Metadata>
            <Item Key="client_id">ProxyIdentityExperienceFramework</Item>
            <Item Key="IdTokenAudience">IdentityExperienceFramework</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="ProxyIdentityExperienceFramework" />
            <InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource" DefaultValue="IdentityExperienceFramework" />
            <InputClaim ClaimTypeReferenceId="continueOnPasswordExpiration" DefaultValue="true"/>
          </InputClaims>
          <OutputClaims>
            <!-- Indicates whether user needs to reset the password.
            If yes, this is the only claim that returns. Other claims aren't return-->
            <OutputClaim ClaimTypeReferenceId="forceChangePasswordNextLogin" PartnerClaimType="passwordExpired"/>
          </OutputClaims>
        </TechnicalProfile>

        <!--Assert whether the new password is different than the old one. -->
        <TechnicalProfile Id="ThrowErrorWhenPassowrdIsSame">
          <DisplayName>Assert New Password is different</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="samePassword"/>
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CompareOldAndNewPassword"/>
            <OutputClaimsTransformation ReferenceId="ThrowErrorWhenPassowrdIsSame"/>
          </OutputClaimsTransformations>
        </TechnicalProfile>

      </TechnicalProfiles>
    </ClaimsProvider>

  <ClaimsProvider>
      <DisplayName>Self Asserted</DisplayName>
      <TechnicalProfiles>

        <!--Password reset-->
        <TechnicalProfile Id="SelfAsserted-ForcePasswordReset-ExpiredPassword">
          <DisplayName>Password Expired</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
          <Metadata>
            <Item Key="setting.retryLimit">10</Item>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
            <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">This password is too weak, try another</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="dummyTrue" DefaultValue="true" />
          </InputClaims>
          <DisplayClaims>
            <DisplayClaim ClaimTypeReferenceId="userMsg"/>
            <DisplayClaim ClaimTypeReferenceId="password" Required="true"/>
            <DisplayClaim ClaimTypeReferenceId="newPassword" Required="true"/>
            <DisplayClaim ClaimTypeReferenceId="reenterPassword" Required="true"/>
          </DisplayClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId"/>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- 1) validate the old password. 2) Assert whether the new password is different than the old one.
                 3) get the user object ID 4) persist the new password to the directory, and reset the force reset password next logon. -->
            <ValidationTechnicalProfile ReferenceId="login-NonInteractive"/>                        
            <ValidationTechnicalProfile ReferenceId="ThrowErrorWhenPassowrdIsSame"/>
            <ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingSignInName"/>
            <ValidationTechnicalProfile ReferenceId="CheckPassword" ContinueOnError="false" />
            <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectId-ResetNextLogin">
              <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                  <Value>banned</Value>
                  <Value>True</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>                              
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
        </TechnicalProfile>

        <!--Password reset, user forgot password-->
        <TechnicalProfile Id="LocalAccountWritePasswordUsingObjectId">
          <DisplayName>Forgot Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"/>
          <Metadata>
            <Item Key="setting.retryLimit">10</Item>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
            <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">This password is too weak, try another</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="dummyTrue" DefaultValue="true" />
          </InputClaims>
          <DisplayClaims>
            <DisplayClaim ClaimTypeReferenceId="newPassword" Required="true"/>
            <DisplayClaim ClaimTypeReferenceId="reenterPassword" Required="true"/>
          </DisplayClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId"/>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="CheckPassword" ContinueOnError="false" />
            <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectId-ResetNextLogin">
              <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                  <Value>banned</Value>
                  <Value>True</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>                              
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop"/>
        </TechnicalProfile>
        <TechnicalProfile Id="CheckPassword">
          <DisplayName>Check password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="dummy" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="passwordToMatchBanList" />
            <OutputClaimsTransformation ReferenceId="CheckBannedPasswordValue" />
            <OutputClaimsTransformation ReferenceId="AssertBannedPasswordFalse" />
          </OutputClaimsTransformations>
        </TechnicalProfile>     
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Azure Active Directory</DisplayName>
      <TechnicalProfiles>
        <!--Read user objectId by signInName-->
        <TechnicalProfile Id="AAD-UserReadUsingSignInName">
          <Metadata>
            <Item Key="Operation">Read</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="signInNames.emailAddress" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!--Save the new password to the directory-->
        <TechnicalProfile Id="AAD-UserWritePasswordUsingObjectId-ResetNextLogin">
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="forceChangePasswordNextLogin" PartnerClaimType="passwordProfile.forceChangePasswordNextLogin" DefaultValue="false" AlwaysUseDefaultValue="true"/>
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectId"/>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!--Add Function call URI here-->
    <ClaimsProvider>
      <DisplayName>Rest Api</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="REST-UserMembershipValidator">
        <DisplayName>Validate user role claim</DisplayName>
        <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://testroleb2c.azurewebsites.net/api/GetRoles?code=9UxMPAGXk7OM9tbNI7RHrpdWea9DGxbtyet27JyvTwP1AJSKWsoyKk==</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="AllowInsecureAuthInProduction">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInNames.emailAddress" PartnerClaimType="emails"/>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="email"/>
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="role" PartnerClaimType="role" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!--Start TOTP-->
    <ClaimsProvider>
      <DisplayName>TOTP</DisplayName>
      <TechnicalProfiles>

        <!-- Begin the TOTP verification process. 
             This technical profile is called right before the AzureMfa-VerifyOTP technical profile-->
        <TechnicalProfile Id="AzureMfa-BeginVerifyOTP">
          <DisplayName>Create Device</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureMfaProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="Operation">BeginVerifyOTP</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="secretKey" />
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="userPrincipalName" />
          </InputClaims>
        </TechnicalProfile>

        <!-- Verify the TOTP verification process. 
             This technical profile is called immediately after the AzureMfa-BeginVerifyOTP technical profile-->
        <TechnicalProfile Id="AzureMfa-VerifyOTP">
          <DisplayName>Verify OTP</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureMfaProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="Operation">VerifyOTP</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="otpCode" />
          </InputClaims>
        </TechnicalProfile>

        <!-- Check the number of devices available for the user. 
             If the number of available devices is zero it indicates the user hasn't enrolled yet -->
        <TechnicalProfile Id="AzureMfa-GetAvailableDevices">
          <DisplayName>Get Available Devices</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureMfaProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="Operation">GetAvailableDevices</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="numberOfAvailableDevices" />
          </OutputClaims>
        </TechnicalProfile>

        <!-- TOTP session manager-->
        <TechnicalProfile Id="SM-MFA-TOTP">
          <DisplayName>Session Mananagement Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="totpIdentifier" />
            <PersistedClaim ClaimTypeReferenceId="issuer" />
          </PersistedClaims>
        </TechnicalProfile>

        <!-- Self-asserted technical profile that asks the user to enroll to the TOTP MFA. The technical profile:
              1) Creates the TOTP secret
              2) Sets the issuer name and the URI
              3) Renders the QR code and the authentication URI
             -->
        <TechnicalProfile Id="EnableOTPAuthentication">
          <DisplayName>Sign up with Authenticator app</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.totp</Item>
            <Item Key="language.button_continue">Continue</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateSecret" />
            <InputClaimsTransformation ReferenceId="CreateIssuer" />
            <InputClaimsTransformation ReferenceId="CreateUriLabel" />
            <InputClaimsTransformation ReferenceId="CreateUriString" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="qrCodeContent" />
            <InputClaim ClaimTypeReferenceId="secretKey" />
          </InputClaims>
          <DisplayClaims>
            <DisplayClaim DisplayControlReferenceId="authenticatorAppIconControl" />
            <DisplayClaim ClaimTypeReferenceId="QrCodeScanInstruction" />
            <DisplayClaim DisplayControlReferenceId="totpQrCodeControl" />
            <DisplayClaim DisplayControlReferenceId="authenticatorInfoControl" />
          </DisplayClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="secretKey" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA-TOTP" />
        </TechnicalProfile>

        <!-- Self-asserted technical profile that verifies the TOTP-->
        <TechnicalProfile Id="OTPVerification">
          <DisplayName>Sign in with Authenticator app</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.totp</Item>
            <Item Key="language.button_continue">Verify</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims></InputClaims>
          <DisplayClaims>
            <DisplayClaim ClaimTypeReferenceId="QrCodeVerifyInstruction" />
            <DisplayClaim ClaimTypeReferenceId="otpCode" Required="true" />
          </DisplayClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="otpCode" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AzureMfa-BeginVerifyOTP" />
            <ValidationTechnicalProfile ReferenceId="AzureMfa-VerifyOTP" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA-TOTP" />
        </TechnicalProfile>

        <!-- Set the number of devices to 0 (default value) -->
        <TechnicalProfile Id="SetTotpDefaultValue">
          <DisplayName>Set Totp Default Values</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="numberOfAvailableDevices" DefaultValue="0" />
          </OutputClaims>
        </TechnicalProfile>

        <!-- Copy the UserId to the totpIdentifier -->
        <TechnicalProfile Id="CreateTotpIdentifier-UserId">
          <DisplayName>Set Totp Default Values</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="totpIdentifier" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="UserIdToLogonIdentifier" />
          </OutputClaimsTransformations>
        </TechnicalProfile>

        <!-- Copy the SignInName to the totpIdentifier -->
        <TechnicalProfile Id="CreateTotpIdentifier-SignInName">
          <DisplayName>Set Totp Default Values</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="totpIdentifier" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="SignInNameToTotpIdentifier" />
          </OutputClaimsTransformations>
        </TechnicalProfile>

        <!-- Copy the Email to the totpIdentifier -->
        <TechnicalProfile Id="CreateTotpIdentifier-Email">
          <DisplayName>Set Totp Default Values</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="totpIdentifier" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="EmailToTotpIdentifier" />
          </OutputClaimsTransformations>
        </TechnicalProfile>

        <TechnicalProfile Id="GetEmailFromReadOnlyEmail">
          <DisplayName>Get Email From ReadOnlyEmail</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="GetEmailFromReadOnlyEmail" />
          </OutputClaimsTransformations>
        </TechnicalProfile>

        <TechnicalProfile Id="GetEmailAddress">
          <DisplayName>Get Email Address</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="ReadOnlyEmail" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="GetEmailFromEmails" />
          </OutputClaimsTransformations>
        </TechnicalProfile>
        <!--end of TOTP-->
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Azure Active Directory</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="AAD-UserReadUsingObjectId">
          <OutputClaims>
            <!-- The userPrincipalName is required for the AzureMfaProtocolProvider technical profiles-->
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Local Account</DisplayName>
      <TechnicalProfiles>

<!-- The userPrincipalName is required for the AzureMfaProtocolProvider technical profiles-->
        <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
          <OutputClaims>
            
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <!-- Bubble up the forceChangePasswordNextLogin claim (return by the login-NonInteractive) to the user journey-->
            <OutputClaim ClaimTypeReferenceId="forceChangePasswordNextLogin" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>

  <UserJourneys>
    <UserJourney Id="PasswordReset">
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PasswordResetUsingEmailAddressExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- Call the TOTP enrollment ub journey. If user already enrolled the sub journey will not ask the user to enroll -->
        <OrchestrationStep Order="2" Type="InvokeSubJourney">
          <JourneyList>
            <Candidate SubJourneyReferenceId="TotpFactor-Input" />
          </JourneyList>
        </OrchestrationStep>

        <!-- Call the TOTP validation sub journey-->
        <OrchestrationStep Order="3" Type="InvokeSubJourney">
          <JourneyList>
            <Candidate SubJourneyReferenceId="TotpFactor-Verify" />
          </JourneyList>
        </OrchestrationStep>

        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="NewCredentials" TechnicalProfileReferenceId="LocalAccountWritePasswordUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <UserJourney Id="SignUpOrSignIn">
      <OrchestrationSteps>

        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>forceChangePasswordNextLogin</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <!--Force password resetUpon password expiration-->
            <ClaimsExchange Id="ForcePasswordResetUponPasswordExpiration" TechnicalProfileReferenceId="SelfAsserted-ForcePasswordReset-ExpiredPassword" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- Call the TOTP enrollment ub journey. If user already enrolled the sub journey will not ask the user to enroll -->
        <OrchestrationStep Order="4" Type="InvokeSubJourney">
          <JourneyList>
            <Candidate SubJourneyReferenceId="TotpFactor-Input" />
          </JourneyList>
        </OrchestrationStep>

        <!-- Call the TOTP validation sub journey-->
        <OrchestrationStep Order="5" Type="InvokeSubJourney">
          <JourneyList>
            <Candidate SubJourneyReferenceId="TotpFactor-Verify" />
          </JourneyList>
        </OrchestrationStep>

        <!-- Get roles from function. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="GetRoleData" TechnicalProfileReferenceId="REST-UserMembershipValidator" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />

      </OrchestrationSteps>
    </UserJourney>
  </UserJourneys>
  <SubJourneys>

    <!--TOTP subjourneys-->
    <!-- Set the required claims numberOfAvailableDevices and totpIdentifier-->
    <SubJourney Id="SetTotpInitialValue" Type="Call">
      <OrchestrationSteps>

        <!-- If number of available device claim not exists, set the value to 0-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>numberOfAvailableDevices</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SetTotpDefaultValue" TechnicalProfileReferenceId="SetTotpDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following orchestration steps try to get the user identifier for different 
             type of authentication, such as local and social account.-->
        
             <!-- Try to get the identifier from UserId-->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>totpIdentifier</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>UserId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SetTotpIdentifierAsUserId" TechnicalProfileReferenceId="CreateTotpIdentifier-UserId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- Get the identifier from email-->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>totpIdentifier</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>email</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SetTotpIdentifierAsEmail" TechnicalProfileReferenceId="CreateTotpIdentifier-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- Get the identifier from the user's emails -->
        <OrchestrationStep Order="4" Type="InvokeSubJourney">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>totpIdentifier</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>emails</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <JourneyList>
            <Candidate SubJourneyReferenceId="ExtractEmailFromEmailsForTotpIdentifier" />
          </JourneyList>
        </OrchestrationStep>
        
        <!-- Get the identifier from local account sign-in name-->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>totpIdentifier</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>signInName</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SetTotpIdentifierAsSignInName" TechnicalProfileReferenceId="CreateTotpIdentifier-SignInName" />
          </ClaimsExchanges>
        </OrchestrationStep>
      </OrchestrationSteps>
    </SubJourney>

    <!-- Get the identifier from the user's emails -->
    <SubJourney Id="ExtractEmailFromEmailsForTotpIdentifier" Type="Call">
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>emails</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="GetEmailAddress" TechnicalProfileReferenceId="GetEmailAddress" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>ReadOnlyEmail</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="GetEmailFromReadOnlyEmail" TechnicalProfileReferenceId="GetEmailFromReadOnlyEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>email</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SetTotpIdentifierAsEmail" TechnicalProfileReferenceId="CreateTotpIdentifier-Email" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>signInName</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SetTotpIdentifierAsSignInName" TechnicalProfileReferenceId="CreateTotpIdentifier-SignInName" />
          </ClaimsExchanges>
        </OrchestrationStep>
      </OrchestrationSteps>
    </SubJourney>

    <!-- TOTP verification sub journey-->
    <SubJourney Id="TotpFactor-Verify" Type="Call">
      <OrchestrationSteps>
        
        <!-- Set the required claims numberOfAvailableDevices and totpIdentifier-->
        <OrchestrationStep Order="1" Type="InvokeSubJourney">
          <JourneyList>
            <Candidate SubJourneyReferenceId="SetTotpInitialValue" />
          </JourneyList>
        </OrchestrationStep>

        <!-- If current user is not a new one (this is a sign-in flow, and not sign-up), 
             check the number of available devices. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="CheckAvailableDevices" TechnicalProfileReferenceId="AzureMfa-GetAvailableDevices" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- If the number of available devices isn't zero (user has enrolled before), 
             render the TOTP verification page -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>numberOfAvailableDevices</Value>
              <Value>0</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorForSignIn" TechnicalProfileReferenceId="OTPVerification" />
          </ClaimsExchanges>
        </OrchestrationStep>
      </OrchestrationSteps>
    </SubJourney>

    <!-- TOTP enrollment sub journey-->
    <SubJourney Id="TotpFactor-Input" Type="Call">
      <OrchestrationSteps>

        <!-- Set the required claims numberOfAvailableDevices and totpIdentifier-->
        <OrchestrationStep Order="1" Type="InvokeSubJourney">
          <JourneyList>
            <Candidate SubJourneyReferenceId="SetTotpInitialValue" />
          </JourneyList>
        </OrchestrationStep>

        <!-- If current user is not a new one (this is a sign-in flow, and not sign-up), 
             check the number of available devices. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="CheckAvailableDevices" TechnicalProfileReferenceId="AzureMfa-GetAvailableDevices" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- If the number of available devices is zero (user hasn't enrolled before), 
            render the TOTP enrollment page to scan the QR code that starts the enrollment process -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
              <Value>numberOfAvailableDevices</Value>
              <Value>0</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorForSignUp" TechnicalProfileReferenceId="EnableOTPAuthentication" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- If the number of available devices is zero (user hasn't enrolled before), 
             render the TOTP verification page.  -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
              <Value>numberOfAvailableDevices</Value>
              <Value>0</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthenticatorForSignIn" TechnicalProfileReferenceId="OTPVerification" />
          </ClaimsExchanges>
        </OrchestrationStep>
      </OrchestrationSteps>
    </SubJourney>
  </SubJourneys>
</TrustFrameworkPolicy>